import os
import re
import requests
from PIL import Image
from bs4 import BeautifulSoup
from docx import Document
from docx.shared import Inches, Pt
from docx.oxml.ns import qn  # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞


def normalize_url(input_url):
    match = re.search(r'/(\d+)', input_url)
    if match:
        article_id = match.group(1)
        return f"https://smart-lab.ru/mobile/topic/{article_id}"
    else:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Å—Ç–∞—Ç—å–∏ –∏–∑ —Å—Å—ã–ª–∫–∏.")


def download_image(img_url, img_path):
    try:
        img_data = requests.get(img_url)
        img_data.raise_for_status()
        with open(img_path, 'wb') as handler:
            handler.write(img_data.content)
        return img_path
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_url}: {e}")
        return None


def convert_image_to_supported_format(img_path):
    if img_path.lower().endswith(".webp"):
        try:
            img = Image.open(img_path)
            img_path_new = img_path.replace(".webp", ".png")
            img.save(img_path_new, "PNG")
            os.remove(img_path)
            print(f"üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {img_path_new}")
            return img_path_new
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {img_path}: {e}")
    return img_path


def save_article_to_docx(raw_url):
    url = normalize_url(raw_url)

    try:
        response = requests.get(url)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        return

    soup = BeautifulSoup(response.text, "html.parser")

    title_tag = soup.select_one("div.post-card__title-wrap")
    title = title_tag.get_text(strip=True) if title_tag else "–°—Ç–∞—Ç—å—è"
    safe_title = re.sub(r'[\\/*?:"<>|]', "", title).replace('.', '_').replace(',', '_').replace(' ', '_')

    article_dir = os.path.join("articles", safe_title)
    os.makedirs(article_dir, exist_ok=True)

    images_dir = os.path.join(article_dir, "images")
    os.makedirs(images_dir, exist_ok=True)

    doc = Document()

    # üî∑ –ó–∞–≥–æ–ª–æ–≤–æ–∫
    heading = doc.add_paragraph()
    run = heading.add_run(title)
    run.font.name = 'Arial Black'
    run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Arial Black')
    run.font.size = Pt(18)

    content = soup.select_one("div.post-card__text")
    if not content:
        print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (p, h1, h2, ul, ol, li, img –∏ —Ç.–¥.)
    for element in content.find_all(True):  # True –æ–∑–Ω–∞—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
        if element.name == "p":  # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            text = element.get_text(strip=True)
            if text:
                paragraph = doc.add_paragraph()
                run = paragraph.add_run(text)
                run.font.name = 'Arial'
                run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Arial')
                run.font.size = Pt(12)

        elif element.name == "h1":  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1 —É—Ä–æ–≤–Ω—è
            text = element.get_text(strip=True)
            if text:
                heading = doc.add_paragraph()
                run = heading.add_run(text)
                run.font.name = 'Arial Black'
                run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Arial Black')
                run.font.size = Pt(16)

        elif element.name == "h2":  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2 —É—Ä–æ–≤–Ω—è
            text = element.get_text(strip=True)
            if text:
                heading = doc.add_paragraph()
                run = heading.add_run(text)
                run.font.name = 'Arial Black'
                run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Arial Black')
                run.font.size = Pt(14)

        elif element.name == "h3":  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ 3 —É—Ä–æ–≤–Ω—è
            text = element.get_text(strip=True)
            if text:
                heading = doc.add_paragraph()
                run = heading.add_run(text)
                run.font.name = 'Arial Black'
                run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Arial Black')
                run.font.size = Pt(12)

        elif element.name == "ul" or element.name == "ol":  # –°–ø–∏—Å–æ–∫
            for li in element.find_all("li"):
                list_item = li.get_text(strip=True)
                if list_item:
                    paragraph = doc.add_paragraph()
                    paragraph.add_run(f"‚Ä¢ {list_item}")  # –°–ø–∏—Å–æ–∫ —Å –º–∞—Ä–∫–µ—Ä–æ–º

        elif element.name == "img":  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_url = element.get("src")
            if not img_url:
                continue

            if not img_url.startswith("http"):
                img_url = "https://smart-lab.ru" + img_url

            img_name = img_url.split("/")[-1].split("?")[0]
            img_path = os.path.join(images_dir, img_name)

            downloaded_img_path = download_image(img_url, img_path)
            if downloaded_img_path:
                img_path = convert_image_to_supported_format(downloaded_img_path)
                try:
                    doc.add_picture(img_path, width=Inches(5.0))
                    print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_path}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}: {e}")

    docx_path = os.path.join(article_dir, f"{safe_title}.docx")
    doc.save(docx_path)
    print(f"\nüìÑ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {docx_path}")
