import os
import re
import requests
from bs4 import BeautifulSoup
import Parser
import Parser_list


def check_img_links_f():
    file_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ HTML —Ñ–∞–π–ª—É –∏–ª–∏ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ").strip()

    if file_path.startswith("http"):
        try:
            response = requests.get(file_path)
            response.raise_for_status()
            html_content = response.text
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return
    else:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                html_content = f.read()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return

    soup = BeautifulSoup(html_content, "html.parser")
    post_content = soup.find("div", class_="post-card__text")

    if not post_content:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ 'post-card__text'.")
        return

    img_tags = post_content.find_all("img")
    a_tags = post_content.find_all("a", class_="imgpreview")

    all_links = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ <img>
    for tag in img_tags:
        src = tag.get("src")
        if src:
            full_url = "https://smart-lab.ru" + src if not src.startswith("http") else src
            all_links.append(full_url)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ <a href>
    for tag in a_tags:
        href = tag.get("href")
        if href:
            full_url = "https://smart-lab.ru" + href if not href.startswith("http") else href
            all_links.append(full_url)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    all_links = list(set(all_links))

    if not all_links:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return

    for link in all_links:
        try:
            response = requests.get(link)
            response.raise_for_status()
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: {link}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {link}: {e}")


def display_menu():
    print("\n–ú–µ–Ω—é:")
    print("1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—å—é –≤ DOCX")
    print("2. –°–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç—å–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CSV")
    print("3. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏")
    print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML —Ñ–∞–π–ª–µ –∏–ª–∏ URL")
    print("5. –í—ã–π—Ç–∏")


def save_article():
    url = input("–í–≤–µ–¥–∏—Ç–µ URL —Å—Ç–∞—Ç—å–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ DOCX: ").strip()
    try:
        Parser.save_article_to_docx(url)
        print("‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")


def parse_and_save_articles():
    try:
        articles = Parser_list.parse()
        if articles:
            Parser_list.save_to_csv(articles)
            print("‚úÖ –°—Ç–∞—Ç—å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV:")
            for article in articles:
                print(article)
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å–∏.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def display_all_articles():
    try:
        articles = Parser_list.parse()
        if articles:
            for article in articles:
                print(article)
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    while True:
        display_menu()
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1‚Äì5): ").strip()

        if choice == "1":
            save_article()
        elif choice == "2":
            parse_and_save_articles()
        elif choice == "3":
            display_all_articles()
        elif choice == "4":
            check_img_links_f()
        elif choice == "5":
            print("üëã –í—ã—Ö–æ–¥...")
            break
        else:
            print("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 5.")


if __name__ == "__main__":
    main()
